import { App } from '@slack/bolt';
import logger from '../utils/logger';

export function registerHelpCommand(app: App): void {
  app.command('/help', async ({ command, ack, respond, client }) => {
    await ack();

    try {
      const text = command.text.trim();
      const topic = text.toLowerCase();

      if (!text) {
        // Show general help
        const blocks = [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: 'ü§ñ *CLOS Slack Bot - Help Center*\n\nI help you manage the Candlefish Operating System workflow right from Slack!'
            }
          },
          {
            type: 'divider'
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '*üìã Available Commands:*'
            }
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '`/unblock` - Start daily unblock session\n`/wip` - Check current WIP status\n`/stage` - Check project stage gates\n`/idea` - Submit or manage ideas\n`/decision` - Create decision memos\n`/demo` - Sign up for Demo Friday\n`/metrics` - View pod metrics\n`/help <command>` - Get detailed help'
            }
          },
          {
            type: 'divider'
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '*üéØ Quick Actions:*'
            }
          },
          {
            type: 'actions',
            elements: [
              {
                type: 'button',
                text: {
                  type: 'plain_text',
                  text: 'Check WIP Status'
                },
                action_id: 'quick_wip_check',
                style: 'primary'
              },
              {
                type: 'button',
                text: {
                  type: 'plain_text',
                  text: 'Submit Idea'
                },
                action_id: 'quick_submit_idea'
              },
              {
                type: 'button',
                text: {
                  type: 'plain_text',
                  text: 'View Metrics'
                },
                action_id: 'quick_view_metrics'
              }
            ]
          },
          {
            type: 'divider'
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '*üí° Tips:*\n‚Ä¢ Use commands without parameters to see interactive options\n‚Ä¢ Add `public` to share results with the channel\n‚Ä¢ Type `/help <command>` for detailed help on specific commands\n‚Ä¢ Access your personal dashboard anytime in the Home tab'
            }
          },
          {
            type: 'context',
            elements: [
              {
                type: 'mrkdwn',
                text: '_CLOS Bot v2.0 | Need more help? Contact #clos-support_'
              }
            ]
          }
        ];

        await respond({
          text: 'CLOS Bot Help',
          blocks,
          response_type: 'ephemeral'
        });

      } else if (topic === 'unblock') {
        await respond({
          text: `üö´ *Unblock Command Help*

*Usage:* \`/unblock\`

*What it does:*
‚Ä¢ Shows all your blocked projects
‚Ä¢ Provides interface to resolve blockers
‚Ä¢ Tracks blocker resolution progress
‚Ä¢ Logs unblock activities

*Features:*
‚Ä¢ Interactive blocker management
‚Ä¢ Add new blockers as discovered
‚Ä¢ Remove resolved blockers
‚Ä¢ Request help from team members

*Tips:*
‚Ä¢ Run daily to stay on top of blockers
‚Ä¢ Be specific when describing blockers
‚Ä¢ Tag team members who can help resolve issues
‚Ä¢ Use during daily standups`,
          response_type: 'ephemeral'
        });

      } else if (topic === 'wip') {
        await respond({
          text: `üìä *WIP Command Help*

*Usage:* 
‚Ä¢ \`/wip\` - Your pod's WIP status
‚Ä¢ \`/wip <pod-name>\` - Specific pod's WIP status
‚Ä¢ \`/wip public\` - Share WIP status with channel

*What it shows:*
‚Ä¢ Current WIP vs WIP limit
‚Ä¢ Utilization percentage with visual progress bar
‚Ä¢ List of active projects
‚Ä¢ Recommendations based on WIP level

*WIP Status Levels:*
üü¢ Healthy (< 80% utilization)
üü° High (80-99% utilization)
üî¥ At Limit (100% utilization)

*Tips:*
‚Ä¢ Monitor daily to prevent overcommitment
‚Ä¢ Focus on completing work before starting new projects
‚Ä¢ Use recommendations to optimize workflow`,
          response_type: 'ephemeral'
        });

      } else if (topic === 'stage') {
        await respond({
          text: `üéØ *Stage Command Help*

*Usage:*
‚Ä¢ \`/stage\` - View your projects and stage gates
‚Ä¢ \`/stage advance <project>\` - Request stage advancement

*Stage Gate Process:*
üí° Idea ‚Üí üîß Prototype ‚Üí üöÄ MVP ‚Üí üìà Scale ‚Üí üåÖ Sunset

*Features:*
‚Ä¢ Check stage gate requirements
‚Ä¢ Request advancement with justification
‚Ä¢ Track approval status
‚Ä¢ View requirement checklists

*Stage Gate Requirements:*
Each stage has specific criteria that must be met before advancement, such as user testing, market validation, technical milestones, etc.

*Tips:*
‚Ä¢ Complete all requirements before requesting advancement
‚Ä¢ Provide detailed justification for advancement requests
‚Ä¢ Gather stakeholder input before major stage transitions`,
          response_type: 'ephemeral'
        });

      } else if (topic === 'idea') {
        await respond({
          text: `üí° *Idea Command Help*

*Usage:*
‚Ä¢ \`/idea\` - Submit new idea
‚Ä¢ \`/idea list\` - View your ideas
‚Ä¢ \`/idea list <status>\` - Filter by status (submitted, approved, etc.)
‚Ä¢ \`/idea team\` - View team ideas publicly

*Idea Lifecycle:*
üìù Submitted ‚Üí üëÄ Reviewing ‚Üí ‚úÖ Approved ‚Üí üöß In Progress

*When submitting ideas:*
‚Ä¢ Provide clear, descriptive title
‚Ä¢ Explain the problem and solution
‚Ä¢ Estimate impact (1-5) and effort (1-5)
‚Ä¢ System automatically calculates priority

*Priority Calculation:*
Priority = Impact / Effort
‚Ä¢ Critical: 3.0+
‚Ä¢ High: 2.0-2.9
‚Ä¢ Medium: 1.0-1.9
‚Ä¢ Low: <1.0

*Tips:*
‚Ä¢ Focus on user value and business impact
‚Ä¢ Be realistic about effort estimates
‚Ä¢ Submit early and iterate based on feedback`,
          response_type: 'ephemeral'
        });

      } else if (topic === 'decision') {
        await respond({
          text: `üìã *Decision Command Help*

*Usage:*
‚Ä¢ \`/decision\` - Create new decision memo
‚Ä¢ \`/decision list\` - View your decisions
‚Ä¢ \`/decision team\` - View team decisions

*Decision Process:*
üìù Draft ‚Üí üëÄ Review ‚Üí ‚úÖ Approved ‚Üí üöÄ Implemented

*Decision Memo Components:*
‚Ä¢ Context & background
‚Ä¢ Options considered
‚Ä¢ Recommendation with rationale
‚Ä¢ Stakeholder list
‚Ä¢ Decision deadline (optional)

*Best Practices:*
‚Ä¢ Document significant decisions for future reference
‚Ä¢ Include key stakeholders in the review process
‚Ä¢ Provide clear rationale for recommendations
‚Ä¢ Set appropriate deadlines for time-sensitive decisions

*Tips:*
‚Ä¢ Write memos before making important decisions
‚Ä¢ Use structured thinking: context ‚Üí options ‚Üí recommendation
‚Ä¢ Review past decisions to improve future decision-making`,
          response_type: 'ephemeral'
        });

      } else if (topic === 'demo') {
        await respond({
          text: `üéØ *Demo Command Help*

*Usage:*
‚Ä¢ \`/demo\` - Sign up for demo slot
‚Ä¢ \`/demo list\` - View demo schedule
‚Ä¢ \`/demo cancel\` - Cancel your signup

*Demo Friday Guidelines:*
‚Ä¢ 5-10 minute presentations
‚Ä¢ Show working software, not slides
‚Ä¢ Focus on user value and impact
‚Ä¢ Include Q&A time
‚Ä¢ Test your demo beforehand

*Preparation Tips:*
‚Ä¢ Start with the problem you're solving
‚Ä¢ Show the solution in action
‚Ä¢ Highlight key features and benefits
‚Ä¢ Share metrics or user feedback
‚Ä¢ End with next steps

*Logistics:*
‚Ä¢ Demos are recorded for reference
‚Ä¢ Arrive 5 minutes early
‚Ä¢ You can invite stakeholders
‚Ä¢ Cancel at least 24h in advance if needed

*Questions?*
Contact demo coordinators or ask in #demos channel.`,
          response_type: 'ephemeral'
        });

      } else if (topic === 'metrics') {
        await respond({
          text: `üìä *Metrics Command Help*

*Usage:*
‚Ä¢ \`/metrics\` - Your pod metrics
‚Ä¢ \`/metrics <pod-name>\` - Specific pod metrics
‚Ä¢ \`/metrics overall\` - Company-wide metrics
‚Ä¢ \`/metrics personal\` - Your personal metrics

*Key Metrics Tracked:*
‚Ä¢ WIP Utilization: How full your pipeline is
‚Ä¢ Throughput: Items completed per week
‚Ä¢ Cycle Time: Average time to complete items
‚Ä¢ Blocker Count: Number of active blockers
‚Ä¢ Idea Submission Rate: Innovation activity
‚Ä¢ Decision Velocity: Decision-making speed

*Health Score:*
System calculates overall health (0-100) based on:
‚Ä¢ WIP management
‚Ä¢ Delivery speed
‚Ä¢ Cycle efficiency
‚Ä¢ Innovation rate

*Performance Indicators:*
üü¢ Excellent/Good performance
üü° Moderate/Needs attention  
üî¥ Poor/Action required

*Tips:*
‚Ä¢ Review metrics weekly to identify trends
‚Ä¢ Use recommendations to improve performance
‚Ä¢ Compare with other pods to benchmark`,
          response_type: 'ephemeral'
        });

      } else {
        await respond({
          text: `‚ùì *Unknown help topic: "${topic}"*

Available help topics:
‚Ä¢ \`/help unblock\` - Daily unblock sessions
‚Ä¢ \`/help wip\` - WIP status monitoring
‚Ä¢ \`/help stage\` - Stage gate management
‚Ä¢ \`/help idea\` - Idea submission and tracking
‚Ä¢ \`/help decision\` - Decision memo creation
‚Ä¢ \`/help demo\` - Demo Friday signups
‚Ä¢ \`/help metrics\` - Metrics and analytics

Use \`/help\` without parameters for general help.`,
          response_type: 'ephemeral'
        });
      }

    } catch (error) {
      logger.error('Help command error:', error);
      await respond({
        text: '‚ùå Failed to show help. Please try again or contact support.',
        response_type: 'ephemeral'
      });
    }
  });

  // Handle quick action buttons from general help
  app.action('quick_wip_check', async ({ ack, body, client }) => {
    await ack();
    
    try {
      const userId = (body as any).user.id;
      // Trigger WIP check (would reuse WIP command logic)
      await client.chat.postMessage({
        channel: userId,
        text: 'üîÑ Checking your WIP status...\n\nUse `/wip` command for full interactive WIP management.'
      });
    } catch (error) {
      logger.error('Quick WIP check error:', error);
    }
  });

  app.action('quick_submit_idea', async ({ ack, body, client }) => {
    await ack();
    
    try {
      const userId = (body as any).user.id;
      // Trigger idea submission (would reuse idea command logic)
      await client.chat.postMessage({
        channel: userId,
        text: 'üí° Ready to submit an idea!\n\nUse `/idea` command to open the idea submission form.'
      });
    } catch (error) {
      logger.error('Quick submit idea error:', error);
    }
  });

  app.action('quick_view_metrics', async ({ ack, body, client }) => {
    await ack();
    
    try {
      const userId = (body as any).user.id;
      // Trigger metrics view (would reuse metrics command logic)
      await client.chat.postMessage({
        channel: userId,
        text: 'üìä Loading your metrics...\n\nUse `/metrics` command for full interactive metrics dashboard.'
      });
    } catch (error) {
      logger.error('Quick view metrics error:', error);
    }
  });
}