version: '3.8'

services:
  # CLOS Core API
  clos-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: clos-core-api
    ports:
      - "4000:4000"  # GraphQL API
      - "4001:4001"  # WebSocket
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://clos_user:clos_password@postgres:5432/clos_db
      REDIS_URL: redis://redis:6379
      AUTH0_DOMAIN: ${AUTH0_DOMAIN:-candlefish.auth0.com}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE:-https://api.candlefish.ai}
      AUTH0_ISSUER: ${AUTH0_ISSUER:-https://candlefish.auth0.com/}
      AUTH0_JWKS_URI: ${AUTH0_JWKS_URI:-https://candlefish.auth0.com/.well-known/jwks.json}
      EVENTBRIDGE_BUS_NAME: clos-events-dev
      EVENTBRIDGE_SOURCE: clos.core-api.dev
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
      LOG_LEVEL: debug
      ALLOW_ANONYMOUS: "true"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - clos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: clos-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: clos_db
      POSTGRES_USER: clos_user
      POSTGRES_PASSWORD: clos_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - clos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clos_user -d clos_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: clos-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - clos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LocalStack for AWS services (development)
  localstack:
    image: localstack/localstack:latest
    container_name: clos-localstack
    ports:
      - "4566:4566"
    environment:
      SERVICES: eventbridge,dynamodb,s3,secretsmanager
      DEBUG: 1
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack_data:/tmp/localstack
    networks:
      - clos-network
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: clos-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@candlefish.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - clos-network
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: clos-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - clos-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  localstack_data:
    driver: local

networks:
  clos-network:
    driver: bridge
    name: clos-network